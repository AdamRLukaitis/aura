#include <int.h>

#include <modules/keyboard/ps2.h>

#include <kernel/ports.h>

#include <log.h>

KeyMapping scanCodeSet1[] = { NULL_MAPPING, { ESCAPE, PRESSED },

{ DIGIT1, PRESSED }, { DIGIT2, PRESSED }, { DIGIT3, PRESSED },
		{ DIGIT4, PRESSED }, { DIGIT5, PRESSED }, { DIGIT6, PRESSED }, { DIGIT7,
				PRESSED }, { DIGIT8, PRESSED }, { DIGIT9, PRESSED }, { DIGIT0,
				PRESSED },

		{ HYPHEN, PRESSED }, { EQUALS, PRESSED }, { BACKSPACE, PRESSED }, { TAB,
				PRESSED },

		{ Q, PRESSED }, { W, PRESSED }, { E, PRESSED }, { R, PRESSED }, { T,
				PRESSED }, { Y, PRESSED }, { U, PRESSED }, { I, PRESSED }, { O,
				PRESSED }, { P, PRESSED }, { LEFT_BRACKET, PRESSED }, {
				RIGHT_BRACKET, PRESSED }, { ENTER, PRESSED }, { LEFT_CONTROL,
				PRESSED }, { A, PRESSED }, { S, PRESSED }, { D, PRESSED }, { F,
				PRESSED }, { G, PRESSED }, { H, PRESSED }, { J, PRESSED }, { K,
				PRESSED }, { L, PRESSED }, { SEMICOLON, PRESSED }, { QUOTE,
				PRESSED }, { GRAVE, PRESSED }, { LEFT_SHIFT, PRESSED }, {
				BACK_SLASH, PRESSED }, { Z, PRESSED }, { X, PRESSED }, { C,
				PRESSED }, { V, PRESSED }, { B, PRESSED }, { N, PRESSED }, { M,
				PRESSED }, { COMMA, PRESSED }, { PERIOD, PRESSED }, {
				FORWARD_SLASH, PRESSED }, { RIGHT_SHIFT, PRESSED }, {
				NUMPAD_TIMES, PRESSED }, { LEFT_ALT, PRESSED },
		{ SPACE, PRESSED }, { CAPS_LOCK, PRESSED }, { F1, PRESSED }, { F2,
				PRESSED }, { F3, PRESSED }, { F4, PRESSED }, { F5, PRESSED }, {
				F6, PRESSED }, { F7, PRESSED }, { F8, PRESSED },
		{ F9, PRESSED }, { F10, PRESSED }, { NUM_LOCK, PRESSED }, { SCROLL_LOCK,
				PRESSED }, { NUMPAD7, PRESSED }, { NUMPAD8, PRESSED }, {
				NUMPAD9, PRESSED }, { NUMPAD_MINUS, PRESSED }, { NUMPAD4,
				PRESSED }, { NUMPAD5, PRESSED }, { NUMPAD6, PRESSED }, {
				NUMPAD_PLUS, PRESSED }, { NUMPAD1, PRESSED },
		{ NUMPAD2, PRESSED }, { NUMPAD3, PRESSED }, { NUMPAD0, PRESSED }, {
				NUMPAD_DECIMAL, PRESSED }, NULL_MAPPING,
		NULL_MAPPING, NULL_MAPPING, { F11, PRESSED }, { F12, PRESSED },
		// big gap (doesn't look like it on OSDev - either 41 or 40 null mappings here
		NULL_MAPPING, NULL_MAPPING, NULL_MAPPING, NULL_MAPPING, NULL_MAPPING,
				NULL_MAPPING, NULL_MAPPING, NULL_MAPPING, NULL_MAPPING,
				NULL_MAPPING, NULL_MAPPING, NULL_MAPPING, NULL_MAPPING,
				NULL_MAPPING, NULL_MAPPING, NULL_MAPPING, NULL_MAPPING,
				NULL_MAPPING, NULL_MAPPING, NULL_MAPPING, NULL_MAPPING,
				NULL_MAPPING, NULL_MAPPING, NULL_MAPPING, NULL_MAPPING,
				NULL_MAPPING, NULL_MAPPING, NULL_MAPPING, NULL_MAPPING,
				NULL_MAPPING, NULL_MAPPING, NULL_MAPPING, NULL_MAPPING,
				NULL_MAPPING, NULL_MAPPING, NULL_MAPPING, NULL_MAPPING,
				NULL_MAPPING, NULL_MAPPING, NULL_MAPPING,

		// released 0x81
		{ ESCAPE, RELEASED },

		{ DIGIT1, RELEASED }, { DIGIT2, RELEASED }, { DIGIT3, RELEASED }, {
				DIGIT4, RELEASED }, { DIGIT5, RELEASED }, { DIGIT6, RELEASED },
		{ DIGIT7, RELEASED }, { DIGIT8, RELEASED }, { DIGIT9, RELEASED }, {
				DIGIT0, RELEASED },

		{ HYPHEN, RELEASED }, { EQUALS, RELEASED }, { BACKSPACE, RELEASED }, {
				TAB, RELEASED },

		{ Q, RELEASED }, { W, RELEASED }, { E, RELEASED }, { R, RELEASED }, { T,
				RELEASED }, { Y, RELEASED }, { U, RELEASED }, { I, RELEASED }, {
				O, RELEASED }, { P, RELEASED }, { LEFT_BRACKET, RELEASED }, {
				RIGHT_BRACKET, RELEASED }, { ENTER, RELEASED }, { LEFT_CONTROL,
				RELEASED }, { A, RELEASED }, { S, RELEASED }, { D, RELEASED }, {
				F, RELEASED }, { G, RELEASED }, { H, RELEASED },
		{ J, RELEASED }, { K, RELEASED }, { L, RELEASED },
		{ SEMICOLON, RELEASED }, { QUOTE, RELEASED }, { GRAVE, RELEASED }, {
				LEFT_SHIFT, RELEASED }, { BACK_SLASH, RELEASED },
		{ Z, RELEASED }, { X, RELEASED }, { C, RELEASED }, { V, RELEASED }, { B,
				RELEASED }, { N, RELEASED }, { M, RELEASED },
		{ COMMA, RELEASED }, { PERIOD, RELEASED }, { FORWARD_SLASH, RELEASED },
		{ RIGHT_SHIFT, RELEASED }, { NUMPAD_TIMES, RELEASED }, { LEFT_ALT,
				RELEASED }, { SPACE, RELEASED }, { CAPS_LOCK, RELEASED }, { F1,
				RELEASED }, { F2, RELEASED }, { F3, RELEASED },
		{ F4, RELEASED }, { F5, RELEASED }, { F6, RELEASED }, { F7, RELEASED },
		{ F8, RELEASED }, { F9, RELEASED }, { F10, RELEASED }, { NUM_LOCK,
				RELEASED }, { SCROLL_LOCK, RELEASED }, { NUMPAD7, RELEASED }, {
				NUMPAD8, RELEASED }, { NUMPAD9, RELEASED }, { NUMPAD_MINUS,
				RELEASED }, { NUMPAD4, RELEASED }, { NUMPAD5, RELEASED }, {
				NUMPAD6, RELEASED }, { NUMPAD_PLUS, RELEASED }, { NUMPAD1,
				RELEASED }, { NUMPAD2, RELEASED }, { NUMPAD3, RELEASED }, {
				NUMPAD0, RELEASED }, { NUMPAD_DECIMAL, PRESSED }, NULL_MAPPING,
		NULL_MAPPING, NULL_MAPPING, { F11, RELEASED }, { F12, RELEASED },
		NULL_MAPPING, NULL_MAPPING, NULL_MAPPING //,

		// next set
		//{NUMPAD_ENTER, RELEASED},{RIGHT_CONTROL, RELEASED},EVENT_NULL, EVENT_NULL, EVENT_NULL,{NUMPAD_DIVIDE, RELEASED},EVENT_NULL, EVENT_NULL,{RIGHT_ALT, RELEASED},EVENT_NULL, EVENT_NULL, EVENT_NULL, EVENT_NULL, EVENT_NULL, EVENT_NULL,{HOME, RELEASED},{CURSOR_UP, RELEASED},{PAGE_UP, RELEASED},EVENT_NULL,{CURSOR_LEFT, RELEASED},EVENT_NULL, {CURSOR_RIGHT, RELEASED},EVENT_NULL,{END, RELEASED},{CURSOR_DOWN, RELEASED},{PAGE_DOWN, RELEASED},{INSERT, RELEASED},{DELETE, RELEASED},EVENT_NULL, EVENT_NULL, EVENT_NULL, {LEFT_GUI, RELEASED},{RIGHT_GUI, RELEASED},{APPS, RELEASED},EVENT_NULL, EVENT_NULL,

		// released
		//{NUMPAD_ENTER, RELEASED},{RIGHT_CONTROL, RELEASED},EVENT_NULL, EVENT_NULL, EVENT_NULL,{NUMPAD_DIVIDE, RELEASED},EVENT_NULL, EVENT_NULL,{RIGHT_ALT, RELEASED},EVENT_NULL, EVENT_NULL, EVENT_NULL, EVENT_NULL, EVENT_NULL, EVENT_NULL,{HOME, RELEASED},{CURSOR_UP, RELEASED},{PAGE_UP, RELEASED},EVENT_NULL,{CURSOR_LEFT, RELEASED},EVENT_NULL, {CURSOR_RIGHT, RELEASED},EVENT_NULL,{END, RELEASED},{CURSOR_DOWN, RELEASED},{PAGE_DOWN, RELEASED},{INSERT, RELEASED},{DELETE, RELEASED},EVENT_NULL, EVENT_NULL, EVENT_NULL, {LEFT_GUI, RELEASED},{RIGHT_GUI, RELEASED},{APPS, RELEASED},EVENT_NULL, EVENT_NULL
		};

static uint8 getScancode() {
	return inb(0x60);
}

uint8 lastScancode;

void ps2_keyboard_probe() {
	uint8 scancode = getScancode();
	if (scancode == 0xE0) {
		scancode = getScancode();
	}

	if (scancode != lastScancode && scancode != 0xFA) {
		lastScancode = scancode;
		debug(L"scancode", scancode);
		keyboard_keyUpdate(scanCodeSet1[scancode]);
	}
}

void ps2_keyboard_init() {
	// disable the second PS/2 port (mouse)
	outb(0x64, 0xF5);
	//outb(0x64, 0xA7);
}
